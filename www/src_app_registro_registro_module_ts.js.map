{"version":3,"file":"src_app_registro_registro_module_ts.js","mappings":"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","sources":["./src/app/registro/registro-routing.module.ts","./src/app/registro/registro.module.ts","./src/app/registro/registro.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegistroPage } from './registro.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegistroPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegistroPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Injectable } from '@angular/core';\nimport { Storage } from '@ionic/storage';\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegistroPageRoutingModule } from './registro-routing.module';\n\nimport { RegistroPage } from './registro.page';\nimport { ReactiveFormsModule } from '@angular/forms';\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RegistroPageRoutingModule\n  ],\n  declarations: [RegistroPage]\n})\nexport class RegistroPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AlertController } from '@ionic/angular';\nimport { RegistroserviceService, Usuario } from '../service/registroservice.service';\nimport { ToastController } from '@ionic/angular';\nimport { NavController } from '@ionic/angular';\nimport {\n  FormGroup, FormControl, Validators, FormBuilder\n} from '@angular/forms';\n\n@Component({\n  selector: 'app-registro',\n  templateUrl: './registro.page.html',\n  styleUrls: ['./registro.page.scss'],\n})\nexport class RegistroPage implements OnInit {\n\n  formularioRegistro: FormGroup; \n  newUsuario: Usuario = <Usuario>{};\n  usuarios: Usuario[] =[];\n\n\n  constructor(public alertController: AlertController,\n              private registroService: RegistroserviceService,\n              private toastController: ToastController,\n              private navController: NavController, \n              public fb:FormBuilder) {\n                this.formularioRegistro = this.fb.group({\n                  'nombre' : new FormControl(\"\", Validators.required), \n                  'correo' : new FormControl(\"\", [Validators.required, Validators.email]), \n                  'password': new FormControl(\"\", Validators.compose([\n                    Validators.required,\n                    Validators.minLength(8),\n                    Validators.maxLength(12),\n                   \n                  ])), \n                  'confirmaPass': new FormControl(\"\", Validators.compose([\n                    Validators.required,\n                    Validators.minLength(8),\n                    Validators.maxLength(12),\n                    \n                  ])),\n                  'tipoUsuario': new FormControl(\"\", Validators.required)\n                })\n               }\n\n  ngOnInit() {\n  }\n\n  usuario = {\n    nombre:'',\n    email: '',\n    password:'',\n    repassword:'',\n    tipousuario:''\n  }\n\n  onSubmit(){\n    console.log('submit');\n    console.log(this.usuario);\n  }\n\n  /*async CrearUsuario(){\n    var f= this.formularioRegistro.value;\n    if(this.formularioRegistro.invalid){\n      const alert = await this.alertController.create({\n        header: 'datos incompletos',\n        message: 'Tienes que llenar',\n        buttons: ['aceptar']\n      });\n      await alert.present();\n      return;\n      \n    }\n    var usuario = {\n      nomUsuario: f.nombre,\n      correoUsuario: f.correo,\n      passUsuario : f.password,\n      repassUsuario : f.confirmaPass,\n      tipoUsuario : f.tipoUs\n    } \n    localStorage.setItem('usuario',JSON.stringify(usuario))\n  }*/\n  async CrearUsuario(){\n    var form = this.formularioRegistro.value;\n    var existe = 0;\n    if (this.formularioRegistro.invalid){\n      this.alertError();\n    }\n    else{\n    this.newUsuario.nomUsuario=form.nombre;\n    this.newUsuario.correoUsuario=form.correo;\n    this.newUsuario.passUsuario = form.password;\n    this.newUsuario.repassUsuario=form.confirmaPass;\n    this.newUsuario.tipoUsuario=form.tipoUs;\n\n    this.registroService.getUsuarios().then(datos=>{ \n      this.usuarios = datos;\n\n      if (!datos || datos.length==0){\n        this.registroService.addDatos(this.newUsuario).then(dato=>{ \n          this.newUsuario=<Usuario>{};\n          this.showToast('Usuario Creado satisfactoriamente');\n        });\n        this.formularioRegistro.reset();\n        this.navController.navigateRoot('login');\n      }else{\n    \n        for (let obj of this.usuarios){\n          if (this.newUsuario.correoUsuario == obj.correoUsuario){\n            existe = 1;\n          }\n        }//Fin del for\n      \n          if (existe == 1){\n            this.alertCorreoDuplicado();\n            this.formularioRegistro.reset();\n          }\n          else{\n            this.registroService.addDatos(this.newUsuario).then(dato=>{ \n              this.newUsuario=<Usuario>{};\n              this.showToast('Usuario Creado satisfactoriamente');\n            });\n            this.formularioRegistro.reset();\n            this.navController.navigateRoot('login');\n          }\n        }\n        })  \n      \n      }//finelse\n    }\n\n  \n  //findelmetodo\n\n  async alertError(){\n    const alert = await this.alertController.create({ \n      header: 'Error..',\n      message: 'Debe completar todos los datos',\n      buttons: ['Aceptar']\n    })\n    await alert.present();\n  }\n\n  async showToast(msg){\n    const toast = await this.toastController.create({\n      message: msg, \n      duration: 3000\n    });\n    toast.present();\n  }\n\n  async alertCorreoDuplicado(){\n    const alert = await this.alertController.create({ \n      header: 'Â¡Error!',\n      message: 'El correo ingresado ya existe',\n      buttons: ['Aceptar']\n    })\n    await alert.present();\n  }\n\n\n}"],"names":["Component","AlertController","RegistroserviceService","ToastController","NavController","FormControl","Validators","FormBuilder","RegistroPage","constructor","alertController","registroService","toastController","navController","fb","nombre","email","password","repassword","tipousuario","formularioRegistro","group","required","compose","minLength","maxLength","ngOnInit","onSubmit","console","log","usuario","CrearUsuario","form","value","existe","invalid","alertError","newUsuario","nomUsuario","correoUsuario","correo","passUsuario","repassUsuario","confirmaPass","tipoUsuario","tipoUs","getUsuarios","then","datos","usuarios","length","addDatos","dato","showToast","reset","navigateRoot","obj","alertCorreoDuplicado","alert","create","header","message","buttons","present","msg","toast","duration","selector","template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}